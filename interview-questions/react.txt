REACT

1. pros and cons, how you compare it with Angular

A library, not a framework

CONS: You dont get lots of stuff out of the box but have to use diff libs for it (ex. routing)
PROS: Low entrance level, lots of docs and tutorials

2. How do you prefer to generate react project and what ways do you know?

traditionally: npx create-react-app
fastest solution: vite - tool that allows generating diff types of projects through command line

3. What is virtual DOM? 

Virtual DOM is the major feature inside react
its a lightweight js representation of DOM tree -> js objects representing user interface 

The virtual DOM is a programming concept where an ideal, or “virtual”, representation of a UI is kept in memory and synced with the “real” DOM by a library such as ReactDOM.
This process is called reconciliation.
React doesnt directly use real dom, first if comapres changes you made inside JS through virtual DOM and then updates ream dom if you made some changes

This approach enables the declarative API of React: 
You tell React what state you want the UI to be in, and it makes sure the DOM matches that state.
This abstracts out the attribute manipulation, event handling, and manual DOM updating that you would otherwise have to use to build your app. 

Since “virtual DOM” is more of a pattern than a specific technology, people sometimes say it to mean different things.
In React world, the term “virtual DOM” is usually associated with React elements since they are the objects representing the user interface.
React, however, also uses internal objects called “fibers” to hold additional information about the component tree.
They may also be considered a part of “virtual DOM” implementation in React.

4. What is the difference between virtual and shadow DOM?

They are different.
The Shadow DOM is a browser technology designed primarily for scoping variables and CSS in web components.
The virtual DOM is a concept implemented by libraries in JavaScript on top of browser APIs.

5. What is “React Fiber”?

Fiber is the new reconciliation engine in React 16.
Its main goal is to enable incremental rendering of the virtual DOM.

6. What is JSX?

JSX is syntax extension for JS that lets you write HTML-like markup inside JS file.
Sugarcoated JS funcs that look like HTML.

JSX can be written without react and react without JSX.

7. Why do you use className and not class in React?

Class is a reserved word in JS and we would have a coallision if we use the word 'class' directly inside 'markup'.

8. What are functional components and props? How to pass props to func components?

Functions that return some JS6 markup
Functional components dont have any state inside 
We use props to pass some info from parent -> child

9. What are class components props and state? 

Class approach is older approach. Its not deprecated but func components are more modern approach
// pogledati kako izgleda
class components have local state
inside class components we have a lifecycle hooks

10. What are dumb/smart components -> representational/conatiner components

Representational/dumb component dont have any logic - just ui representation
container/smart components -> have logic /state

11. How to render a list of data and why is bad use index as a key? 

in order for react to understand our array and to render it efficiently, we must provide key attribute so React knows
how to destinguish elements
if we alter out array by adding and deleting elements from array, we can acces the wrong element by index


12. What is React.Fragment? 

Used fro dome node without dom element
<></> -> shorter version

13. What is conditional rendering in React?

1. if statement
2. ternary operator
3. condition && 

14. How to apply styles in react?

css file for global styling
object in react and then inline
as a separate file per component

15. How parent and child can communicate in react and can we mutate props?

We pass props from top down
we cannot mutate props, they are readonly and that's so by design
how to communicate child -> parent? again passing from parent to child

16. What is useState hook? 

hook for managing state inside functional components -> [state, f] tumpple of state and state setter
not allowed to be nested in loops conditions etc
you should not organize state like obj

17. useEffect hook

Hook for handling side effects
smth triggers rendering of component and useEffect is triggered

18. useReducer hook

bringing Redux inside React

19. useContext hook

useContext is a React Hook that lets you read and subscribe to context from your component.

Context lets the parent component make some information available to any component in the tree below it—no matter how deep—without passing it explicitly through props.

20. useRef hook? 

useRef hook is used for accessing DOM element or for storing some mutable value between renderings

21. useMemo hook

useMemo hook allows us to cache data between rerendering and int only recalculates data when properties are changed.
Like memoization

useMemo caches a calculation result between re-renders until its dependencies change.

22. useCallback hook

we use useCallback to cache a function call. If we are passing a function from parent -> child,
if parent renders,function will recreate and be passed to child as new func and child component 
is rendered
in order to avoid that, function is wrapped in useCallback function, where function is recreated
only when dependency array changes

23. How React.memo works and how to add comparator to it?

memo lets you skip re-rendering a component when its props are unchanged.

it happens that arrays are recreated and that way it's always new array in memory and it is treated like a new prop
so we also have to be careful about outside props and to store them in state or to write comparator function and check if props have changed

Wrap a component in memo to get a memoized version of that component.
This memoized version of your component will usually not be re-rendered when its parent component is re-rendered as long as its props have not changed.
But React may still re-render it: memoization is a performance optimization, not a guarantee.

24. What ways of structuring files in React you know?

2 ways: 
by type, by feature

by type is easier but not scalable

25. What do you know about routing? How is react-router working?

react-router library

react-router-dom -> browser routing

BrowserRouter enables routing

Routes -> path to rendering components

Link -> link to our route, enables going to the page 

Layout -> wrapper around our routes, like a parent for routes

Outlet -> component which renders our routes in that place

path=* ako ode na nesto nepostojece

dynamic routes => /:smth => useParams
query parameters => useSearchParams

route guard => const Auth = (children) => {if(!token) return; return children}

26. React portal

Rendering something directly inside body

modals and tooltip -> they must stay at top of our app

27. What is React lazy or React suspense?

sa lazy mora da se provajduje fallback component dok se ne lazy loaduje komponenta

lazy lading omogucava da se velike komponente loaduju in chunks
uglavnom sa rutama, da se loaduju stvari tek kad odemo na stranu

28. React reconciliation process

React Reconciliation Process 🚀
Reconciliation is the process React uses to efficiently update the DOM when your component’s state or props change.
Instead of re-rendering the entire UI, React intelligently updates only the parts that have changed using the Virtual DOM.

1️⃣ Render Phase:

When a component’s state or props change, React creates a new Virtual DOM tree (a lightweight copy of the actual DOM).
It compares this new tree with the previous Virtual DOM tree.

2️⃣ Diffing Algorithm:

React determines the minimum number of changes needed by comparing the old and new Virtual DOM trees.
Instead of checking every node, React optimizes updates by:
Comparing elements by type (e.g., <div> vs. <span>)
Checking the key prop (in lists) to track element identity
Skipping updates for unchanged components

3️⃣ Commit Phase:

After identifying differences (aka “diffing”), React updates only the necessary parts of the real DOM in the most efficient way.
React ensures the minimum number of DOM operations for better performance.

🔹 Optimizations in Reconciliation
✅ Keys in Lists: Helps React track which elements changed or were removed/added.
✅ shouldComponentUpdate (Class Components): Prevents unnecessary re-renders.
✅ React.memo (Functional Components): Prevents re-renders if props haven’t changed.
✅ useMemo & useCallback: Optimize expensive calculations and functions.

🔹 Why Not Update the Real DOM Directly?
The Real DOM is slow because:

DOM updates cause reflows and repaints (which can be expensive).
Updating the entire DOM is inefficient, especially in complex apps.
Direct DOM manipulation blocks JavaScript execution, slowing down interactivity.
The Virtual DOM solves this by:
✅ Minimizing unnecessary updates
✅ Batching updates for efficiency
✅ Avoiding full page reloads

29. How does React handle form submissions, and how do you prevent the default behavior?

🔹 Handling Form Submissions in React
In React, forms are handled using state and event handlers to control input values.
You typically use the onSubmit event handler to manage form submission.

30. What is React fiber?

React Fiber is a new reconciliation algorithm introduced in React 16 to improve rendering performance.
It replaces the old stack-based algorithm, making React more efficient.

🔹 Key Benefits of React Fiber
✅ Improved Rendering → Fiber allows React to break rendering into small units and pause work if necessary.
✅ Concurrent Mode → Enables React to prioritize important updates, such as user interactions.
✅ Smooth Animations → Fiber helps with rendering complex animations without blocking the UI.
✅ Better Error Handling → It improves error recovery and debugging.

🔹 How React Fiber Works
React splits rendering work into small chunks ("fibers").
Instead of blocking the main thread, it spreads the work over multiple frames.
This allows React to prioritize updates dynamically for a smoother experience.

31. What is a Higher-Order Component (HOC)?

A Higher-Order Component (HOC) is a function that takes a component and returns a new component with additional props or logic.

32. What is the difference between Context API and Redux? When should you use one over the other?

🔹 When to Use Context API?
✅ Small to medium apps with simple state management needs
✅ Avoids prop drilling for passing data deeply in component trees
✅ When you need lightweight global state (e.g., theme, authentication)

🔹 When to Use Redux?
✅ Large applications that require structured state management
✅ When multiple components need to interact with shared state across the app
✅ When you need middleware (e.g., API calls, logging, caching)

33. What are Synthetic Events?

React wraps native browser events inside a SyntheticEvent object.
This allows React to handle events consistently across all browsers.
The SyntheticEvent system improves performance by pooling events and reusing them to reduce memory usage.

Synthetic vs. native

cross-browser compatibility => yes | no
Event Pooling	Yes (reused for performance)	No (new instance every time)
Performance	Optimized using event pooling	Creates new event objects
Accessing Native Event	event.nativeEvent	Directly available

34. What is a Pure Component?

A Pure Component is a component that only re-renders when its props or state change.

It uses shallow comparison (===) to optimize rendering.
This prevents unnecessary re-renders, improving performance.

Functional Equivalent: React.memo

🔹 When to Use Pure Components?
✅ If props/state don’t change frequently
✅ If component renders large lists or complex UI
✅ When avoiding unnecessary renders improves performance

35.  What is the difference between React.memo and useMemo?

🔹 React.memo (Optimizes Component Re-rendering)
Prevents re-rendering if props haven’t changed.
Used on components to optimize rendering performance.
Shallow compares props by default.

🔹 useMemo (Optimizes Expensive Calculations)
Caches computed values to avoid unnecessary recalculations.
Used inside functional components to optimize performance

36. How does React handle memory leaks, and how can you prevent them?

🔹 What Causes Memory Leaks in React?
❌ Unsubscribed listeners (e.g., event listeners, timers)
❌ Unmounted components still holding references
❌ Not clearing intervals or timeouts

✅ Use Cleanup in useEffect
✅ Remove Event Listeners
✅ Use AbortController for Fetch Requests

📌 Always clean up side effects in useEffect to prevent memory leaks!

37. What is Hydration?

Hydration is the process where React attaches event listeners and makes a static HTML page interactive after Server-Side Rendering (SSR).
It helps React resume where the server left off.

🔹 How Hydration Works
Server renders the initial HTML and sends it to the browser.
Browser loads JavaScript and React "hydrates" the page.
React attaches event listeners and makes UI interactive without re-rendering everything.

38.  How do you handle authentication in React? Explain different approaches.

✅ Local Authentication (JWT-based)
✅ OAuth (Google, Facebook, GitHub login)
✅ Session-based Authentication

📌 Use JWT for scalable authentication,
OAuth for third-party login,
and session-based auth for server-side control.

39. What are controlled and uncontrolled components in React?

🔹 Controlled Components
A controlled component is a React component where the form element's value is controlled by React state.
This means React is the "source of truth" for the form data.

How it works: The form input is rendered with the value set from React state, and any changes to the input are updated in the state.

🔹 Uncontrolled Components
An uncontrolled component is a component where the form element’s state is handled by the DOM itself, rather than by React.
React does not control the state directly, and you typically use a ref to access the value.

How it works: The form input does not rely on React state for its value, and the state is accessed only when needed (e.g., after a submit).

40. How does React handle state updates, and why is state batching important?

🔹 How Batching Works
React batches multiple state updates into a single update, improving performance.
This means that React may delay updates and process them together, reducing unnecessary re-renders.

🔹 How Batching Works
In event handlers: React groups multiple state updates triggered by an event handler into a single re-render.
In asynchronous code (like setTimeout or promises): React batches state updates during these async operations, but in some cases (like setState inside setTimeout), it might not batch them depending on the environment (before React 18).

🔹 Why is Batching Important?
Reduces re-renders: By grouping updates, React avoids unnecessary renders, improving performance.
Ensures correct behavior: It ensures that multiple state updates are consistent and based on the same state, preventing inconsistencies in the UI.

41. How do you optimize large lists in React? (e.g., virtualization)

🔹 Virtualization of Large Lists
React’s list rendering can be slow when displaying large datasets because it creates and updates all DOM nodes at once.
Virtualization optimizes this by rendering only the items that are currently visible in the viewport.

🔹 Libraries for List Virtualization
react-window: Lightweight and fast library for rendering large lists by rendering only the visible items.
react-virtualized: A more feature-rich library for optimizing rendering of large datasets, including grid and list virtualization

🔹 Benefits of Virtualization
Performance improvement: Only renders visible items, reducing the number of DOM nodes.
Scalability: Handles large datasets efficiently without slowing down the browser.
Lazy loading: Virtualized lists can also be combined with lazy loading, rendering only when the user scrolls.

🔹 Other Optimization Techniques
Windowing: Display only a small number of items in the visible area, dynamically loading new items as the user scrolls.
Throttling/Debouncing: Throttle or debounce scroll events to minimize unnecessary renders while scrolling.













